fn set[T](_ comptime var: Var[T], _ value: T) {}

fn push[T](_ comptime list: List[T], _ value: T) {}

fn delete[T](_ comptime list: List[T], index _: Num) {}

fn delete-all[T](_ comptime list: List[T]) {}

fn insert[T](_ comptime list: List[T], _ item: T, at index: Num) {}

fn replace[T](_ comptime list: List[T], index _: Num, with item: Num) {}

fn at[T](_ comptime list: List[T], _ index: Num) -> T {}

fn index[T](_ comptime list: List[T], of item: T) -> Num {}

fn length[T](_ comptime list: List[T]) -> Num {}

fn contains[T](_ comptime list: List[T], _ item: T) -> Bool {}

fn add(_ lhs: Num, _ rhs: Num) -> Num {}
fn sub(_ lhs: Num, _ rhs: Num) -> Num {}
fn mul(_ lhs: Num, _ rhs: Num) -> Num {}
fn div(_ lhs: Num, _ rhs: Num) -> Num {}
fn mod(_ lhs: Num, _ rhs: Num) -> Num {}

fn lt(_ lhs: Num, _ rhs: Num) -> Bool {}
fn eq(_ lhs: Num, _ rhs: Num) -> Bool {}
fn gt(_ lhs: Num, _ rhs: Num) -> Bool {}
fn lt(_ lhs: String, _ rhs: String) -> Bool {}
fn eq(_ lhs: String, _ rhs: String) -> Bool {}
fn gt(_ lhs: String, _ rhs: String) -> Bool {}

fn not(_ bool: Bool) -> Bool {}

fn join(_ lhs: String, _ rhs: String) -> String {}

fn answer() -> String {}

fn ask(_ question: String) {}

fn change-x(by amount: Num) {}

fn change-y(by amount: Num) {}

fn erase-all() {}

fn go-to(x _: Num, y _: Num) {}

fn hide() {}

fn move(steps _: Num) {}

fn pen-down() {}

fn pen-up() {}

fn reset-timer() {}

fn say(_ message: String) {}
fn say(_ message: String, seconds _: Num) {}

fn set-costume(to costume: String) {}
fn set-costume(to costume: Num) {}

fn set-pen-color(to color: Num) {}

fn set-pen-size(to size: Num) {}

fn set-size(to size: Num) {}

fn set-x(to _: Num) {}

fn set-y(to _: Num) {}

fn show() {}

fn stamp() {}

fn wait(seconds _: Num) {}
